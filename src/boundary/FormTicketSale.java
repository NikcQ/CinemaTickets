package boundary;

import control.ManageProjection;
import control.ManageTicket;
import entity.Projection;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;

/**
 * @author Edisson
 */
public class FormTicketSale extends javax.swing.JPanel {

    ArrayList<Projection> showings = new ArrayList<Projection>();
    ArrayList<String> descriptions = new ArrayList<String>();

    String selCategory;
    ArrayList<int[]> seats;

    /**
     * Creates new form ticketSalePanel
     */
    public FormTicketSale() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        seatTypeBTNGRP = new javax.swing.ButtonGroup();
        movieCBX = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        dateFLD = new javax.swing.JTextField();
        projectionCBX = new javax.swing.JComboBox<>();
        confirmBTN = new javax.swing.JButton();
        loadBTN = new javax.swing.JButton();
        movieFilterBTN = new javax.swing.JButton();
        dateFilterBTN = new javax.swing.JButton();
        gaRBTN = new javax.swing.JRadioButton();
        vipCBX = new javax.swing.JRadioButton();
        dxRBTN = new javax.swing.JRadioButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        rowCBX = new javax.swing.JComboBox<>();
        seatsCBX = new javax.swing.JComboBox<>();
        numSeatsSPN = new javax.swing.JSpinner();
        jLabel6 = new javax.swing.JLabel();
        rowBTN = new javax.swing.JButton();
        clientIdTXT = new javax.swing.JTextField();
        RedeemBTN = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(650, 400));

        movieCBX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                movieCBXActionPerformed(evt);
            }
        });

        jLabel1.setText("Movie");

        jLabel2.setText("Date");

        jLabel3.setText("Projection");

        projectionCBX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                projectionCBXActionPerformed(evt);
            }
        });

        confirmBTN.setText("Confirm");
        confirmBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmBTNActionPerformed(evt);
            }
        });

        loadBTN.setText("LOAD");
        loadBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadBTNActionPerformed(evt);
            }
        });

        movieFilterBTN.setText("Filter by Movie");
        movieFilterBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                movieFilterBTNActionPerformed(evt);
            }
        });

        dateFilterBTN.setText("Filter by Date");
        dateFilterBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateFilterBTNActionPerformed(evt);
            }
        });

        seatTypeBTNGRP.add(gaRBTN);
        gaRBTN.setText("GA");
        gaRBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gaRBTNActionPerformed(evt);
            }
        });

        seatTypeBTNGRP.add(vipCBX);
        vipCBX.setText("VIP");
        vipCBX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vipCBXActionPerformed(evt);
            }
        });

        seatTypeBTNGRP.add(dxRBTN);
        dxRBTN.setText("4DX");
        dxRBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dxRBTNActionPerformed(evt);
            }
        });

        jLabel4.setText("Row");

        jLabel5.setText("Seats");

        rowCBX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rowCBXActionPerformed(evt);
            }
        });

        jLabel6.setText("Number of seats");

        rowBTN.setText("Select Row");
        rowBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rowBTNActionPerformed(evt);
            }
        });

        clientIdTXT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clientIdTXTActionPerformed(evt);
            }
        });

        RedeemBTN.setText("Redeem");
        RedeemBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RedeemBTNActionPerformed(evt);
            }
        });

        jLabel7.setText("Client ID");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(projectionCBX, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(loadBTN)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                                .addComponent(jLabel2))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel1)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addGap(2, 2, 2))
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel7))))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(movieCBX, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(movieFilterBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(dateFLD, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(dateFilterBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(rowCBX, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(rowBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(gaRBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(vipCBX, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(dxRBTN))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel6)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(numSeatsSPN, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(RedeemBTN)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(confirmBTN))
                                    .addComponent(seatsCBX, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(clientIdTXT)))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(91, 91, 91)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(projectionCBX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(loadBTN)
                            .addComponent(dateFilterBTN)
                            .addComponent(dateFLD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(movieFilterBTN)
                            .addComponent(movieCBX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(numSeatsSPN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(gaRBTN)
                    .addComponent(vipCBX)
                    .addComponent(dxRBTN))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rowBTN)
                    .addComponent(rowCBX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(seatsCBX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clientIdTXT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RedeemBTN)
                    .addComponent(confirmBTN))
                .addContainerGap(78, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void movieCBXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_movieCBXActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_movieCBXActionPerformed

    private void projectionCBXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_projectionCBXActionPerformed
        /*if (projectionCBX.getSelectedItem() != null) {
            GASeats.removeAllItems();
            VIPSeats.removeAllItems();
            Seats4D.removeAllItems();
            Projection proj = new Projection();
            String idProjection = (String) projectionCBX.getSelectedItem();
            String[] parts = idProjection.split(" - ");
            int index = Integer.parseInt(idProjection = parts[1]);
            proj = ManageProjection.getProjection(index);
            for (int i = 0; i < proj.numberOfAvailableSeats(proj.getBlockGA()); i++) {
                GASeats.addItem(String.valueOf(i + 1));
            }
            for (int i = 0; i < proj.numberOfAvailableSeats(proj.getBlockVIP()); i++) {
                VIPSeats.addItem(String.valueOf(i + 1));
            }
            for (int i = 0; i < proj.numberOfAvailableSeats(proj.getBlock4DX()); i++) {
                Seats4D.addItem(String.valueOf(i + 1));
            }

        }*/
    }//GEN-LAST:event_projectionCBXActionPerformed

    private void confirmBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmBTNActionPerformed
        // TODO add your handling code here:
        
        int[] saleSeats = seats.get(seatsCBX.getSelectedIndex());
        System.out.println(ManageTicket.verifySeats(ManageProjection.getProjection((String) projectionCBX.getSelectedItem()), selCategory, Integer.parseInt((String) rowCBX.getSelectedItem())-1, saleSeats, clientIdTXT.getText(), false));

    }//GEN-LAST:event_confirmBTNActionPerformed

    private void loadBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadBTNActionPerformed
        System.out.println("Loading...");
        // Display all Projections
        projectionCBX.removeAllItems();
        showings = ManageProjection.getAllProjections();
        for (String d : ManageProjection.getProjectionDescriptions(showings, true)) {
            projectionCBX.addItem(d);
        }

        // Display all Movies
        movieCBX.removeAllItems();
        for (String t : ManageProjection.getProjectionTitles(showings)) {
            movieCBX.addItem(t);
        }

        System.out.println("Loaded");
    }//GEN-LAST:event_loadBTNActionPerformed

    private void movieFilterBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_movieFilterBTNActionPerformed
        System.out.println("Filtering by Movie... \"" + (String) movieCBX.getSelectedItem() + "\"");
        // Filter and display projections of the selected movie
        projectionCBX.removeAllItems();
        showings = ManageProjection.filterProjectionsByTitle(ManageProjection.getAllProjections(), (String) movieCBX.getSelectedItem());
        for (String d : ManageProjection.getProjectionDescriptions(showings, true)) {
            projectionCBX.addItem(d);
            //System.out.println(d);
        }
        System.out.println("Filtered by Movie.");
    }//GEN-LAST:event_movieFilterBTNActionPerformed

    private void dateFilterBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateFilterBTNActionPerformed
        System.out.println("Filtering by Date...");
        // Filter and display projections on the selected date
        projectionCBX.removeAllItems();
        showings = ManageProjection.filterProjectionsByDate(showings, LocalDate.parse(dateFLD.getText()));
        for (String d : ManageProjection.getProjectionDescriptions(showings, false)) {
            projectionCBX.addItem(d);
        }

        // update movies and show only those with projections on the date
        movieCBX.removeAllItems();
        for (String t : ManageProjection.getProjectionTitles(showings)) {
            movieCBX.addItem(t);
        }
        System.out.println("Filtered by Date.");
    }//GEN-LAST:event_dateFilterBTNActionPerformed

    private void rowCBXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rowCBXActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rowCBXActionPerformed

    private void setRowCBX(Projection proj, String cat) {
        selCategory = cat;
        rowCBX.removeAllItems();
        rowCBX.setEnabled(true);
        int blockRows = ManageProjection.getSeatBlock(proj, cat).length;
        if (blockRows == 0) {
            rowCBX.addItem("No rows in " + cat);
            rowCBX.setEnabled(false);
        } else {
            for (int i = 1; i <= blockRows; i++) {
                rowCBX.addItem(Integer.toString(i));
            }
        }
    }


    private void gaRBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gaRBTNActionPerformed
        // TODO add your handling code here:
        if (projectionCBX.getSelectedItem() != null) {
            setRowCBX(ManageProjection.getProjection((String) projectionCBX.getSelectedItem()), "GA");
        }
    }//GEN-LAST:event_gaRBTNActionPerformed

    private void vipCBXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vipCBXActionPerformed
        // TODO add your handling code here:
        if (projectionCBX.getSelectedItem() != null) {
            setRowCBX(ManageProjection.getProjection((String) projectionCBX.getSelectedItem()), "VIP");
        }
    }//GEN-LAST:event_vipCBXActionPerformed

    private void dxRBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dxRBTNActionPerformed
        // TODO add your handling code here:
        if (projectionCBX.getSelectedItem() != null) {
            setRowCBX(ManageProjection.getProjection((String) projectionCBX.getSelectedItem()), "4DX");
        }
    }//GEN-LAST:event_dxRBTNActionPerformed

    private void rowBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rowBTNActionPerformed
        // TODO add your handling code here:
        if (rowCBX.isEnabled()) {
            seatsCBX.setEnabled(true);
            Projection selProj = ManageProjection.getProjection((String) projectionCBX.getSelectedItem());
            int selRow = Integer.parseInt((String) rowCBX.getSelectedItem())-1;
            int numSeats = (int) numSeatsSPN.getValue();
            boolean[][] selBlock = ManageProjection.getSeatBlock(selProj, selCategory);
            
            seatsCBX.removeAllItems();
            if (numSeats > 0) {
                seats = ManageProjection.getEmptySeatsFromBlock(selBlock, selRow, numSeats);
                for (int[] seat : seats) {
                    seatsCBX.addItem(Arrays.toString(seat));
                }
            }
        } else{
            seatsCBX.setEnabled(false);
        }
    }//GEN-LAST:event_rowBTNActionPerformed

    private void clientIdTXTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clientIdTXTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_clientIdTXTActionPerformed

    private void RedeemBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RedeemBTNActionPerformed
        // TODO add your handling code here:
        int[] saleSeats = seats.get(seatsCBX.getSelectedIndex());
        System.out.println(ManageTicket.verifySeats(ManageProjection.getProjection((String) projectionCBX.getSelectedItem()), selCategory, Integer.parseInt((String) rowCBX.getSelectedItem())-1, saleSeats, clientIdTXT.getText(), true));
    }//GEN-LAST:event_RedeemBTNActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton RedeemBTN;
    private javax.swing.JTextField clientIdTXT;
    private javax.swing.JButton confirmBTN;
    private javax.swing.JTextField dateFLD;
    private javax.swing.JButton dateFilterBTN;
    private javax.swing.JRadioButton dxRBTN;
    private javax.swing.JRadioButton gaRBTN;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JButton loadBTN;
    private javax.swing.JComboBox<String> movieCBX;
    private javax.swing.JButton movieFilterBTN;
    private javax.swing.JSpinner numSeatsSPN;
    private javax.swing.JComboBox<String> projectionCBX;
    private javax.swing.JButton rowBTN;
    private javax.swing.JComboBox<String> rowCBX;
    private javax.swing.ButtonGroup seatTypeBTNGRP;
    private javax.swing.JComboBox<String> seatsCBX;
    private javax.swing.JRadioButton vipCBX;
    // End of variables declaration//GEN-END:variables
}
